from flask import Flask, request, jsonify
import requests
import re
from datetime import datetime, timezone, timedelta
from flask import render_template_string

app = Flask(__name__)

# ========= Regex t√°ch m√£ OTP ========= #
OTP_REGEX = [
    r"\b(?:code|OTP|m√£)[^\d]{0,10}(\d{6})\b",  # v√≠ d·ª•: OTP l√† 123456
    r"\b(\d{6})\b"  # fallback: b·∫•t k·ª≥ chu·ªói 6 s·ªë n√†o
]

# ========= L·∫•y access_token t·ª´ refresh_token ========= #
def get_access_token(refresh_token, client_id):
    token_url = "https://login.microsoftonline.com/common/oauth2/v2.0/token"
    data = {
        'client_id': client_id,
        'grant_type': 'refresh_token',
        'refresh_token': refresh_token,
        'scope': 'https://graph.microsoft.com/.default'
    }
    response = requests.post(token_url, data=data)
    if response.status_code == 200:
        return response.json().get("access_token")
    return None

# ========= ƒê·ªçc email qua Graph API ========= #
def read_emails(access_token, max_email=10):
    headers = {"Authorization": f"Bearer {access_token}"}
    url = f"https://graph.microsoft.com/v1.0/me/messages?$top={max_email}&$orderby=receivedDateTime desc"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json().get("value", [])
    return []

# ========= T√°ch m√£ OTP t·ª´ n·ªôi dung ========= #
def extract_otp(email):
    text = f"{email.get('subject', '')} {email.get('body', {}).get('content', '')}"
    for pattern in OTP_REGEX:
        match = re.search(pattern, text, flags=re.IGNORECASE)
        if match:
            return match.group(1)
    return None

# ========= API: h·ªó tr·ª£ GET & POST ========= #
@app.route("/read_mail_otp", methods=["GET", "POST"])
def read_mail_otp():
    if request.method == "POST":
        data = request.get_json()
    else:
        data = request.args

    refresh_token = data.get("refresh_token")
    client_id = data.get("client_id")
    max_email_raw = data.get("max_email")
    # N·∫øu kh√¥ng truy·ªÅn th√¨ m·∫∑c ƒë·ªãnh l√† l·∫•y 1 mail g·∫ßn nh·∫•t
    max_email = int(max_email_raw) if max_email_raw and max_email_raw.isdigit() else 1
    keyword = data.get("keyword", "").lower()
    time_window_raw = data.get("time_window")

    # N·∫øu c√≥ time_window th√¨ chuy·ªÉn sang s·ªë, c√≤n kh√¥ng th√¨ None
    #time_window_minutes = int(time_window_raw) if time_window_raw else None
    
    # N·∫øu c√≥ time_window th√¨ chuy·ªÉn sang s·ªë, c√≤n kh√¥ng th√¨ m·∫∑c ƒë·ªãnh 5 ph√∫t
    time_window_minutes = int(time_window_raw) if time_window_raw and time_window_raw.isdigit() else 5

    if not refresh_token or not client_id:
        return jsonify({"error": "Missing refresh_token or client_id"}), 400

    access_token = get_access_token(refresh_token, client_id)
    if not access_token:
        return jsonify({"error": "Failed to get access_token"}), 401

    emails = read_emails(access_token, max_email)
    now = datetime.now(timezone.utc)
    result = []

    for email in emails:
        # L·ªçc th·ªùi gian n·∫øu c√≥ y√™u c·∫ßu
        received_time_str = email.get("receivedDateTime")
        if received_time_str:
            received_time = datetime.fromisoformat(received_time_str.replace("Z", "+00:00"))
            if time_window_minutes is not None:
                if (now - received_time) > timedelta(minutes=time_window_minutes):
                    continue

        # L·ªçc t·ª´ kh√≥a n·∫øu c√≥ y√™u c·∫ßu
        subject = email.get("subject", "").lower()
        body = email.get("body", {}).get("content", "").lower()
        if keyword and keyword not in subject and keyword not in body:
            continue

        # Tr√≠ch OTP
        otp = extract_otp(email)
        if otp:
            result.append({
                "from": email.get("from", {}).get("emailAddress", {}).get("address", ""),
                "subject": email.get("subject", ""),
                "code": otp,
                "received": received_time_str
            })
            
    if not result:
        return jsonify([{"code": "0"}])

    return jsonify(result)

@app.route("/")
def index():
    return render_template_string("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Get Mail Code</title>
        <style>
            body { font-family: sans-serif; max-width: 600px; margin: 30px auto; }
            input, button { padding: 10px; width: 100%; margin: 5px 0; font-size: 16px; }
            pre { background: #f0f0f0; padding: 10px; white-space: pre-wrap; }
        </style>
    </head>
    <body>
        <h2>üîê L·∫•y m√£ OTP t·ª´ email (Hotmail/Outlook)</h2>
        <input type="text" id="refresh_token" placeholder="Refresh Token">
        <input type="text" id="client_id" placeholder="Client ID">
        <input type="text" id="keyword" placeholder="L·ªçc t·ª´ kho√° (v√≠ d·ª•: facebook, twitter - c√≥ th·ªÉ ƒë·ªÉ tr·ªëng)">
        <input type="number" id="time_window" placeholder="Th·ªùi gian l·ªçc (ph√∫t, ƒë·ªÉ tr·ªëng m·∫∑c ƒë·ªãnh l√† 5 ph√∫t)">
        <input type="number" id="max_email" placeholder="S·ªë l∆∞·ª£ng mail t·ªëi ƒëa (ƒë·ªÉ tr·ªëng m·∫∑c ƒë·ªãnh l√† 1 email)">
        <button onclick="getCode()">Get Code</button>
        <pre id="output">üëâ Nh·∫≠p th√¥ng tin r·ªìi nh·∫•n n√∫t Get Code...</pre>

        <script>
            async function getCode() {
                const token = document.getElementById("refresh_token").value;
                const clientId = document.getElementById("client_id").value;
                const keyword = document.getElementById("keyword").value;
                const timeWindow = document.getElementById("time_window").value;
                const maxEmail = document.getElementById("max_email").value;

                const params = new URLSearchParams({
                    refresh_token: token,
                    client_id: clientId,
                    keyword: keyword,
                    time_window: timeWindow,
                    max_email: maxEmail
                });

                document.getElementById("output").innerText = "‚è≥ ƒêang x·ª≠ l√Ω...";

                try {
                    const res = await fetch("/read_mail_otp?" + params.toString());
                    const data = await res.json();
                    document.getElementById("output").innerText = JSON.stringify(data, null, 2);
                } catch (err) {
                    document.getElementById("output").innerText = "‚ùå L·ªói: " + err;
                }
            }
        </script>
    </body>
    </html>
    """)

# ========= Ch·∫°y server ========= #
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
